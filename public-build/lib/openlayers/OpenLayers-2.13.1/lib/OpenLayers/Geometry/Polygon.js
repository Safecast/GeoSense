/* Copyright (c) 2006-2013 by OpenLayers Contributors (see authors.txt for
 * full list of contributors). Published under the 2-clause BSD license.
 * See license.txt in the OpenLayers distribution or repository for the
 * full text of the license. */

OpenLayers.Geometry.Polygon=OpenLayers.Class(OpenLayers.Geometry.Collection,{componentTypes:["OpenLayers.Geometry.LinearRing"],getArea:function(){var e=0;if(this.components&&this.components.length>0){e+=Math.abs(this.components[0].getArea());for(var t=1,n=this.components.length;t<n;t++)e-=Math.abs(this.components[t].getArea())}return e},getGeodesicArea:function(e){var t=0;if(this.components&&this.components.length>0){t+=Math.abs(this.components[0].getGeodesicArea(e));for(var n=1,r=this.components.length;n<r;n++)t-=Math.abs(this.components[n].getGeodesicArea(e))}return t},containsPoint:function(e){var t=this.components.length,n=!1;if(t>0){n=this.components[0].containsPoint(e);if(n!==1&&n&&t>1){var r;for(var i=1;i<t;++i){r=this.components[i].containsPoint(e);if(r){r===1?n=1:n=!1;break}}}}return n},intersects:function(e){var t=!1,n,r;if(e.CLASS_NAME=="OpenLayers.Geometry.Point")t=this.containsPoint(e);else if(e.CLASS_NAME=="OpenLayers.Geometry.LineString"||e.CLASS_NAME=="OpenLayers.Geometry.LinearRing"){for(n=0,r=this.components.length;n<r;++n){t=e.intersects(this.components[n]);if(t)break}if(!t)for(n=0,r=e.components.length;n<r;++n){t=this.containsPoint(e.components[n]);if(t)break}}else for(n=0,r=e.components.length;n<r;++n){t=this.intersects(e.components[n]);if(t)break}if(!t&&e.CLASS_NAME=="OpenLayers.Geometry.Polygon"){var i=this.components[0];for(n=0,r=i.components.length;n<r;++n){t=e.containsPoint(i.components[n]);if(t)break}}return t},distanceTo:function(e,t){var n=!t||t.edge!==!1,r;return!n&&this.intersects(e)?r=0:r=OpenLayers.Geometry.Collection.prototype.distanceTo.apply(this,[e,t]),r},CLASS_NAME:"OpenLayers.Geometry.Polygon"}),OpenLayers.Geometry.Polygon.createRegularPolygon=function(e,t,n,r){var i=Math.PI*(1/n-.5);r&&(i+=r/180*Math.PI);var s,o,u,a=[];for(var f=0;f<n;++f)s=i+f*2*Math.PI/n,o=e.x+t*Math.cos(s),u=e.y+t*Math.sin(s),a.push(new OpenLayers.Geometry.Point(o,u));var l=new OpenLayers.Geometry.LinearRing(a);return new OpenLayers.Geometry.Polygon([l])};