function create(){var e=new Backbone.DeepModel({id:123,user:{type:"Spy",name:{first:"Sterling",last:"Archer"}}});return e}module("DeepModel"),test("get: Gets nested attribute values",function(){var e=create();deepEqual(e.get("id"),123),deepEqual(e.get("user"),{type:"Spy",name:{first:"Sterling",last:"Archer"}}),deepEqual(e.get("user.type"),"Spy"),deepEqual(e.get("user.name"),{first:"Sterling",last:"Archer"}),deepEqual(e.get("user.name.first"),"Sterling")}),test("get: Gets nested attribute values from arrays",function(){var e=new Backbone.DeepModel({spies:[{name:"Sterling"},{name:"Lana"}]});deepEqual(e.get("spies.0.name"),"Sterling"),deepEqual(e.get("spies.1.name"),"Lana")}),test("get: Gets attributes if empty objects",function(){var e=new Backbone.DeepModel({foo:{},bar:[]});deepEqual(e.get("foo"),{}),deepEqual(e.get("bar"),[])}),test("set: Sets nested values given a path",function(){var e=create();e.set({id:456}),equal(e.attributes.id,456),e.set({"user.name.first":"Lana","user.name.last":"Kang"}),equal(e.attributes.user.name.first,"Lana"),equal(e.attributes.user.name.last,"Kang"),e.set({"user.type":"Agent"}),equal(e.attributes.user.type,"Agent"),e.set({"user.name":{first:"Cheryl",last:"Tunt"}}),equal(e.attributes.user.name.first,"Cheryl"),equal(e.attributes.user.name.last,"Tunt"),e.set({user:{type:"Secretary",name:{first:"Cheryl",last:"Tunt"}}}),deepEqual(e.attributes.user,{type:"Secretary",name:{first:"Cheryl",last:"Tunt"}})}),test("set: Sets a single value - not nested",function(){var e=create();e.set("id",456),equal(e.attributes.id,456)}),test("set: Sets a single value - nested",function(){var e=create();e.set("user.type","Admin"),e.set("user.name.first","Foo"),equal(e.attributes.user.type,"Admin"),equal(e.attributes.user.name.first,"Foo")}),test("set: Sets a single value inside null to create an object",function(){var e=create();e.set("user",null),e.set("user.type","Admin"),equal(e.attributes.user.type,"Admin")}),test("set: Sets a single value inside null to create an object when given an object",function(){var e=create();e.set("user",null),e.set({user:{type:"Admin"}}),equal(e.attributes.user.type,"Admin")}),test("set: Sets values when given an object",function(){var e=create(),t={id:456,user:{type:"Agent",name:{first:"Lana",last:"Kang"}}};e.set(t),deepEqual(e.attributes,t)}),test("set: Can set an object in place of a child non-object value",function(){var e=new Backbone.DeepModel({id:123,name:""}),t={first:"Burt",last:"Reynolds"};e.set("name",t),deepEqual(e.attributes.id,123),deepEqual(e.attributes.name,t)}),test("set: Triggers model change:[attribute] events",function(){(function(){var e=create(),t=!1;e.bind("change:id",function(e,n){equal(n,456),t=!0}),e.set({id:456}),ok(t)})(),function(){var e=create(),t=!1,n=!1;e.on("change:user.name.first",function(e,n){equal(n,"Lana"),t=!0}),e.bind("change:user.name.last",function(e,t){equal(t,"Kang"),n=!0}),e.set({"user.name.first":"Lana","user.name.last":"Kang"}),ok(t),ok(n)}(),function(){var e=create(),t=[];e.bind("all",function(e,n,r){t.push(e)}),e.set({id:456,"user.name.first":"Lana"}),deepEqual(t,["change:id","change:user.name.first","change:user.name.*","change:user.*","change"])}()}),test("set: Correct values passed to wildcard event handlers",function(){var e=create(),t=!1,n=!1,r=!1;e.on("change:user.name.first",function(e,n){equal(n,"Lana"),t=!0}),e.bind("change:user.name.*",function(e,t){deepEqual(t,{first:"Lana",last:"Archer"}),n=!0}),e.bind("change:user.*",function(e,t){deepEqual(t,{name:{first:"Lana",last:"Archer"},type:"Spy"}),r=!0}),e.set({"user.name.first":"Lana"}),ok(t),ok(n),ok(r)}),test("set: Don't convert Date objects to strings",function(){var e=create();e.set({date:new Date}),ok(_.isDate(e.attributes.date))}),test("set: Don't delete property when setting it twice with the same value",function(){var e=new Backbone.DeepModel;e.set("route",{}),e.set("route.pathName","/some/route/path"),equal(e.get("route.pathName"),"/some/route/path"),e.set("route.pathName","/some/route/path"),equal(e.get("route.pathName"),"/some/route/path")}),test("set: options are passed to the change:[attribute] callback",function(){(function(){var e=create(),t=!1;e.bind("change:id",function(e,n,r){equal(n,456),equal(r.owner,"Jane Doe"),t=!0}),e.set({id:456},{owner:"Jane Doe"}),ok(t)})(),function(){var e=create(),t=!1,n=!1;e.on("change:user.name.first",function(e,n,r){equal(n,"Lana"),equal(r.changeid,871),t=!0}),e.bind("change:user.name.last",function(e,t,r){equal(t,"Kang"),equal(r.changeid,872),n=!0}),e.set({"user.name.first":"Lana"},{changeid:871}),e.set({user:{name:{last:"Kang"}}},{changeid:872}),ok(t),ok(n)}()}),test("has: Check if model has root key",function(){var e=create();equal(e.has("user"),!0)}),test("has: Check if model has deep key",function(){var e=create();equal(e.has("user.name.last"),!0)}),test("has: Don't find nonexistent key",function(){var e=create();equal(e.has("user.turtleneck"),!1)}),test("unset: Unset a root key",function(){var e=create();e.unset("user"),equal(e.get("user"),undefined),deepEqual(e.toJSON(),{id:123})}),test("unset: Unset a deep key",function(){var e=create();e.unset("user.type"),deepEqual(e.get("user"),{name:{first:"Sterling",last:"Archer"}}),deepEqual(e.toJSON(),{id:123,user:{name:{first:"Sterling",last:"Archer"}}})}),test("unset: Unset a deeper key",function(){var e=create();e.unset("user.name.last"),deepEqual(e.get("user"),{type:"Spy",name:{first:"Sterling"}}),deepEqual(e.toJSON(),{id:123,user:{type:"Spy",name:{first:"Sterling"}}})}),test("unset: Triggers model change:[attribute] events",function(){(function(){var e=create(),t=!1;e.bind("change:id",function(e,n){equal(n,void 0),t=!0}),e.unset("id"),ok(t)})(),function(){var e=create(),t=!1;e.bind("change:user.name.first",function(e,n){equal(n,void 0),t=!0}),e.unset("user.name.first"),ok(t)}(),function(){var e=create(),t=[];e.bind("all",function(e,n,r){t.push(e)}),e.unset("id"),e.unset("user.name.first"),deepEqual(t,["change:id","change","change:user.name.first","change:user.name.*","change:user.*","change"])}()}),test("hasChanged(): matches Model behaviour - when not changed",function(){var e=new Backbone.Model({foo:"bar"}),t=new Backbone.DeepModel({foo:"bar",user:{first:"John",last:"Smith"}});deepEqual(e.hasChanged(),!1),deepEqual(t.hasChanged(),!1)}),test("hasChanged(): matches Model behaviour - when changed",function(){var e=new Backbone.Model({foo:"bar"}),t=new Backbone.DeepModel({foo:"bar",user:{first:"John",last:"Smith"}});e.set("foo","baz"),t.set("foo","baz"),deepEqual(e.hasChanged(),!0),deepEqual(t.hasChanged(),!0)}),test("hasChanged(attr): matches Model behaviour - when not changed",function(){var e=new Backbone.Model({foo:"bar"}),t=new Backbone.DeepModel({foo:"bar",user:{first:"John",last:"Smith"}});deepEqual(e.hasChanged("foo"),!1),deepEqual(t.hasChanged("foo"),!1),deepEqual(t.hasChanged("user.first"),!1)}),test("hasChanged(attr): matches Model behaviour - when changed",function(){var e=new Backbone.Model({foo:"bar"}),t=new Backbone.DeepModel({foo:"bar",user:{first:"John",last:"Smith"}});e.set("foo","baz"),t.set("foo","baz"),deepEqual(e.hasChanged("foo"),!0),deepEqual(t.hasChanged("foo"),!0),t.set("user.first","Frank"),deepEqual(t.hasChanged("user.first"),!0)}),test("changedAttributes(): returns changed attributes",function(){var e=create();e.set("user.name.first","Lana",{silent:!0});var t=e.changedAttributes(),n={"user.name.first":"Lana"};deepEqual(t,n)}),test("changedAttributes(): returns changed attributes compared to given object",function(){var e=create(),t={id:789,"user.name.last":"Kang"},n=e.changedAttributes(t),r={id:789,"user.name.last":"Kang"};deepEqual(n,r)}),test("changedAttributes(): behaves as Model for top level properties",function(){var e=new Backbone.Model({foo:1,bar:1}),t=new Backbone.DeepModel({foo:1,bar:1});deepEqual(t.changedAttributes(),e.changedAttributes()),e.set({foo:2}),t.set({foo:2}),deepEqual(e.changedAttributes(),{foo:2}),deepEqual(t.changedAttributes(),{foo:2})}),test("changedAttributes(): with deep properties",function(){var e=new Backbone.DeepModel({foo:{baz:1},bar:{baz:1}});deepEqual(e.changedAttributes(),!1),e.set({"foo.bar":2}),deepEqual(e.changedAttributes(),{"foo.bar":2})}),test("changedAttributes(diff): behaves as Model for top level properties",function(){var e=new Backbone.Model({foo:1,bar:1}),t=new Backbone.DeepModel({foo:1,bar:1}),n={foo:2};deepEqual(t.changedAttributes(n),e.changedAttributes(n)),deepEqual(t.changedAttributes(n),{foo:2}),e.set({foo:2}),t.set({foo:2}),deepEqual(t.changedAttributes(n),e.changedAttributes(n)),deepEqual(t.changedAttributes(n),!1)}),test("changedAttributes(diff): with deep properties",function(){var e=new Backbone.DeepModel({foo:{baz:1},bar:{baz:1}}),t={"foo.baz":2};deepEqual(e.changedAttributes(t),{"foo.baz":2}),e.set({"foo.baz":2}),deepEqual(e.changedAttributes(t),!1)}),test("hasChanged(): behaves as Model for top level attributes",function(){var e=new Backbone.Model({test:1}),t=new Backbone.DeepModel({test:1});equal(t.hasChanged(),e.hasChanged()),e.set({test:2}),t.set({test:2}),deepEqual(e.hasChanged(),!0),deepEqual(t.hasChanged(),!0)}),test("hasChanged(): with deep attributes",function(){var e=new Backbone.DeepModel({foo:{bar:1}});equal(e.hasChanged(),!1),e.set({"foo.bar":2}),equal(e.hasChanged(),!0)}),test("hasChanged(attr): behaves as Model for top level attributes",function(){var e=new Backbone.Model({test:1}),t=new Backbone.DeepModel({test:1});equal(t.hasChanged("test"),e.hasChanged("test")),e.set({test:2}),t.set({test:2}),deepEqual(e.hasChanged("test"),!0),deepEqual(t.hasChanged("test"),!0)}),test("hasChanged(attr): with deep attributes",function(){var e=new Backbone.DeepModel({foo:{bar:1}});equal(e.hasChanged("foo.bar"),!1),e.set({"foo.bar":2}),equal(e.hasChanged("foo.bar"),!0)}),test("defaults: with deep attributes",function(){var e=Backbone.DeepModel.extend({defaults:{details:{name:{last:"Smith",initial:"J"}}}}),t=new e({details:{name:{first:"John",initial:"Z"}}});equal(t.get("details.name.first"),"John"),equal(t.get("details.name.last"),"Smith"),equal(t.get("details.name.initial"),"Z")});