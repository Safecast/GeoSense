define(["jquery","underscore","backbone","views/homepage-view","views/header-view","views/setup-view","views/map-ol-view","views/layers-panel-view","views/data-detail-view","views/map-info-view","views/map-layer-editor-view","views/map-layer-view","views/data-library-view","views/data-import-view","views/modal-view","views/share-view","collections/map-point-collection","models/map","models/point","models/map_layer"],function(e,t,n,r,i,s,o,u,a,f,l,c,h,p,d,v,m,g,b,w){var E=n.Router.extend({routes:{},defaultRoutes:{"":"homeRoute",removed:"homeRoute","admin/:slug":"mapAdminRoute","admin/:slug/:view":"mapAdminRoute","admin/:slug/:view/:pos":"mapAdminRoute",":slug":"mapRoute",":slug/:view":"mapRoute",":slug/:view/:pos":"mapRoute"},byHostRoutes:{removed:"homeRoute",admin:"mapAdminRouteByHost","admin/:view":"mapAdminRouteByHost","admin/:view/:pos":"mapAdminRouteByHost","":"mapRouteByHost",":view":"mapRouteByHost",":view/:pos":"mapRouteByHost"},getRoutes:function(){var e;window.MAP_SLUG?(console.log("route by custom host"),e=this.byHostRoutes):(console.log("route by slug"),e=this.defaultRoutes);var t=[];for(var n in e)t.unshift([n,e[n]]);return t},setUIReady:function(){e("#center-spinner").hide("fast",function(){e(this).remove()})},initialize:function(){var e=this;t.each(this.getRoutes(),function(t){e.route.apply(e,t)}),this.map=null,this.firstLoad=!0,this.pointCollections={},this.timeBasedPointCollections={},this.isRendered=!1,this.mapLayerSubViewsAttached=!1,this.mapLayerEditorViews={},this.settingsVisible=!0,this.graphVisible=!1,this.dataLibraryVisible=!1,this.chatVisible=!1,this.vent=t.extend({},n.Events),this.adminRoute=!1,this.routingByHost=!1,this.listenTo(this.vent,"showMapLayerEditor",this.showMapLayerEditor),this.listenTo(this.vent,"viewOptionsChanged",this.viewOptionsChanged),this.isEmbedded=window!=window.top},mapRoute:function(t,n,r){var i,s,o,u,a;if(n){this.setupRoute=n=="setup";if(!this.setupRoute){var f=n.split(":");i=f.shift(),f.length>1&&(s=f.shift()),f.length&&(o=f.shift())}else e("#app").empty()}if(r!=undefined){var f=r.split(",");f.length==3&&(a=f.pop()),f.length==2&&(x=parseFloat(f.shift()),y=parseFloat(f.shift()),!isNaN(x)&&!isNaN(y)&&(u=[x,y]))}console.log("slug:",t,"mapViewName:",i,"viewBase:",s,"viewStyle:",o,"center:",u,"zoom:",a),this.loadAndInitMap(t,i,u,a,s,o)},mapAdminRoute:function(e,t,n){this.adminRoute=!0,this.mapRoute(e,t,n)},mapRouteByHost:function(e,t){return this.routingByHost=!0,this.mapRoute(window.MAP_SLUG,e,t)},mapAdminRouteByHost:function(e,t){return this.routingByHost=!0,this.mapAdminRoute(window.MAP_SLUG,e,t)},homeRoute:function(){this.firstLoad?(this.firstLoad=!1,this.homepageView=new r,e("#app").append(this.homepageView.render().el)):window.location.reload(!0)},genMapViewParam:function(e){if(!e||e=="map"){var t=this.mapView.viewBase&&this.mapView.viewBase!=DEFAULT_MAP_VIEW_BASE,n=t||this.mapView.viewStyle&&this.mapView.viewStyle!=this.mapView.defaultViewStyle;e=this.mapViewName+(n||t?":":"")+(t?this.mapView.viewBase+":":"")+(n?this.mapView.viewStyle?this.mapView.viewStyle:"default":"")}return e},genMapURI:function(e,t,n){var n=(n||n==undefined)&&this.adminRoute;return e=this.genMapViewParam(e),genMapURI(this.map.attributes,e,t,n,this.routingByHost?!1:"publicslug")},genPublicURL:function(e){return genMapURL(this.map.attributes,e?this.getURIOptsForVisibleMapArea():!1,!1)},getURIOptsForVisibleMapArea:function(e){if(!e)var e=this.mapView.getVisibleMapArea();var t={x:e.center[0],y:e.center[1],zoom:e.zoom,mapViewName:this.genMapViewParam("map")},n={x:this.map.attributes.initialArea.center.length?this.map.attributes.initialArea.center[0]:0,y:this.map.attributes.initialArea.center.length?this.map.attributes.initialArea.center[1]:0,zoom:this.map.attributes.initialArea.zoom!=undefined?this.map.attributes.initialArea.zoom:0};return n.x!=t.x||n.y!=t.y||n.zoom!=t.zoom?t:{mapViewName:t.mapViewName}},genMapURIForVisibleArea:function(e){return app.genMapURI(null,this.getURIOptsForVisibleMapArea(e))},genAdminURL:function(){return genMapURL(this.map.attributes,!1,!0)},loadAndInitMap:function(e,t,n,r,i,s){var o=this;switch(t){default:t="map";break;case"map":break;case"globe":}if(!this.map){this.map=new g({publicslug:e}),this.map.fetch({success:function(e,u,a){console.log("initMapInfo"),o.initMap(),o.initMapView(t,n,r,i,s)},error:function(t,n,r){console.error("failed to load map",e)}});return}console.log("initMapView"),o.initMapView(t,n,r,i,s)},initMap:function(){var e=this;this.mapLayersById={},t.each(this.map.attributes.layers,function(t){e.initMapLayer(e.map.newLayerInstance(t))})},initMapView:function(t,n,r,i,s){var a=this;a.isRendered||a.render(t),this.mapViewName=t,this.mapView&&(this.mapView.remove(),this.mapView=null);switch(this.mapViewName){case"map":var f=o;e("#navMap").addClass("active"),e("#navGlobe").removeClass("active");break;case"globe":var f=MapGLView;e("#navMap").removeClass("active"),e("#navGlobe").addClass("active")}var l=this.getDefaultVisibleMapArea();n&&(l.center=n),r&&(l.zoom=r),this.mapView=new f({vent:a.vent,visibleMapArea:l}),this.listenTo(this.mapView,"visibleAreaChanged",this.visibleMapAreaChanged),this.listenTo(this.mapView,"feature:select",this.showDetailData),this.listenTo(this.mapView,"feature:unselect",this.hideDetailData),this.listenTo(this.mapView,"view:ready",this.mapViewReady);var c=this.mapView.render().el;e("#app").append(c),this.$mainEl=e(c),this.mainEl=this.$mainEl[0],this.mapView.renderMap(i,s),this.viewOptionsChanged(this.mapView);var h=e('<div class="snap top" /><div class="snap right" />');this.$mainEl.append(h),this.layersPanelView=(new u({vent:this.vent})).render(),this.attachPanelView(this.layersPanelView)},mapViewReady:function(){var e=this;setTimeout(function(){console.log("mapViewReady: attaching sub views for all layers"),e.setUIReady(),e.attachMapLayerSubViews(),e.fetchMapFeatures()},200)},getMapLayer:function(e){return console.log(this.mapLayersById),this.mapLayersById[e]},initMapLayer:function(e,t){var n=this;return console.log("initMapLayer",e.id),this.mapLayersById[e.id]=e,this.mapLayerSubViewsAttached&&(this.attachSubViewsForMapLayer(e,t),this.fetchMapFeatures()),this.listenTo(e,"toggle:enabled",function(){n.fetchMapFeatures()}),e.getDataStatus()!=DataStatus.COMPLETE&&this.pollForMapLayerStatus(e,INITIAL_POLL_INTERVAL),e},pollForMapLayerStatus:function(e,t){var n=this;if(t){setTimeout(function(){n.pollForMapLayerStatus(e)},t);return}e.once("sync",function(){if(e.getDataStatus()==DataStatus.COMPLETE){n.fetchMapFeatures();return}n.pollForMapLayerStatus(e,POLL_INTERVAL)}),e.fetch({data:{incomplete:!0}})},attachSubViewsForMapLayer:function(e,t){console.log("attachSubViewsForMapLayer",e.id,e.getDisplay("title"),e);var n=(new c({model:e,vent:this.vent})).render();this.layersPanelView.appendSubView(n),t&&n.hide().show("fast"),this.mapView.attachLayer(e),e.featureCollection.setVisibleMapArea(this.mapView.getVisibleMapArea())},attachMapLayerSubViews:function(){var e=this;e.mapLayerSubViewsAttached||(e.mapLayerSubViewsAttached=!0,t.each(e.mapLayersById,function(t){e.attachSubViewsForMapLayer(t)}),this.layersPanelView.show("fast"))},visibleMapAreaChanged:function(){var e=this.mapView.getVisibleMapArea();t.each(this.mapLayersById,function(t){t.featureCollection.setVisibleMapArea(e)}),this.fetchMapFeatures()},fetchMapFeatures:function(){t.each(this.mapLayersById,function(e){e.isEnabled()&&e.getDataStatus()==DataStatus.COMPLETE&&!e.featureCollection.isCurrent()&&(console.log("Fetching features for",e.id,e.getDisplay("title")),e.featureCollection.fetch())})},getDefaultVisibleMapArea:function(){var e=DEFAULT_MAP_AREA;return this.map.attributes.initialArea&&this.map.attributes.initialArea.center.length&&(e.center=this.map.attributes.initialArea.center),this.map.attributes.initialArea.zoom!=undefined&&(e.zoom=this.map.attributes.initialArea.zoom),e},viewOptionsChanged:function(t){var n=this;if(t==this.mapView){e("#app").removeClass(function(e,t){return(t.match(/\bmap-style-\S+/g)||[]).join(" ")});if(this.mapView.viewStyles){e("#app").addClass("map-style-"+this.mapView.viewStyle);var r=[];e.each(this.mapView.viewStyles,function(e,t){var i=e;r.push("<li"+(i==n.mapView.viewStyle?' class="inactive"':"")+">"+'<a href="#'+i+'">'+t+"</a></li>")}),e("#viewStyle .dropdown-menu").html(r.join("")),e("#viewStyleCurrent").text(this.mapView.viewStyles[this.mapView.viewStyle]),e("#viewStyle").show()}else e("#viewStyle").hide();if(this.mapView.viewBase){var r=[];for(var i in this.mapView.ViewBase){var s=this.mapView.ViewBase[i].prototype;r.push("<li"+(i==n.mapView.viewBase?' class="inactive"':"")+">"+'<a href="#'+i+'">'+'<span class="view-base-thumb" style="background: url(/assets/baselayer-thumbs/'+i+'.png)"></span>'+'<span class="view-base-caption">'+s.providerName+"</span>"+"</a></li>")}e("#viewBase .dropdown-menu").html(r.join("")),e("#viewBaseCurrent").text(this.mapView.ViewBase[this.mapView.viewBase].prototype.providerName),e("#viewBaselayer").show()}else e("#viewBaselayer").hide()}},setViewStyle:function(e,t){this.vent.trigger("updateViewStyle",e),(t||t==undefined)&&app.navigate(app.genMapURIForVisibleArea(),{trigger:!1})},setViewBase:function(e,t){this.vent.trigger("updateViewBase",e),(t||t==undefined)&&app.navigate(app.genMapURIForVisibleArea(),{trigger:!1})},showMapInfo:function(){this.mapInfoView=(new f({model:this.map})).render(),this.mapInfoView.show()},toggleDataLibrary:function(){this.dataLibraryVisible?(this.dataLibraryView.remove(),this.dataLibraryVisible=!1):(this.dataLibraryView=new h,this.$mainEl.append(this.dataLibraryView.render().el),this.dataLibraryVisible=!0)},showShareLink:function(){var e=(new v).render();e.show()},showAbout:function(){var e=(new d).render();e.setTitle("About GeoSense"),e.setBody(nl2p("GeoSense is an open publishing platform for visualization, social sharing, and data analysis of geospatial data. It explores the power of data analysis through robust layering and highly customizable data visualization. GeoSense supports the simultaneous comparison and individual styling for multiple massive data sources ranging from 10 thousand to 10 million geolocated points.\n\nDeveloped by Anthony DeVincenzi and Samuel Luescher of the MIT Media Lab, alongside Hiroshi Ishii and Safecast.org.")),e.show()},showSetupView:function(){this.setupView.show()},isMapAdmin:function(){return this.adminRoute&&this.map.attributes.admin},render:function(){console.log("main render");var t=this;window.document.title=this.map.get("title")+" – GeoSense",this.isEmbedded&&e("body").addClass("embed"),this.headerView=new i({vent:this.vent,model:this.map}),e("#app").append(this.headerView.render().el),e("body").css("overflow","hidden"),window.location.href.indexOf("4D4R0IjQJYzGP0m")!=-1&&e("body").addClass("embed"),this.isMapAdmin()&&(this.setupView=(new s({model:this.map})).render(),this.setupRoute&&this.showSetupView()),t.isRendered=!0},getURLParameter:function(e){return decodeURI((RegExp(e+"="+"(.+?)(&|$)").exec(location.search)||[,null])[1])},toggleDataImport:function(){this.dataImportView||(this.dataImportView=(new p({vent:this.vent})).render()),this.dataImportView.show()},updateVisibleDate:function(t,n){var r=this;e.each(this.pointCollections,function(e,i){i.urlParams.t="w",i.urlParams.from=t.format("%Y-%m-%d"),i.urlParams.to=n.format("%Y-%m-%d"),r.fetchMapLayer(i.pointCollectionId),console.log(i.urlParams)})},showDetailData:function(e,t){this.dataDetailView||(this.dataDetailView=(new a).render()),this.dataDetailView.setModel(e),this.attachPanelView(this.dataDetailView),this.dataDetailView.snapToView(this.layersPanelView,"left",!0).hide().show("fast")},hideDetailData:function(e){this.dataDetailView&&this.dataDetailView.detach()},showMapLayerEditor:function(e){var t=e.id,n=this;this.mapLayerEditorViews[t]||(this.mapLayerEditorViews[t]=(new l({vent:this.vent,model:this.getMapLayer(t)})).render());for(var r in this.mapLayerEditorViews)t!=this.mapLayerEditorViews[r].model.get("_id")?this.mapLayerEditorViews[r].detach():this.mapLayerEditorViews[r].isVisible()?this.mapLayerEditorViews[r].hide("fast",function(){n.mapLayerEditorViews[r].detach()}):(this.mapLayerEditorViews[r].hide(),this.attachPanelView(this.mapLayerEditorViews[r]),this.mapLayerEditorViews[r].snapToView(this.layersPanelView,"left",!0).show("fast"))},attachPanelView:function(e){this.$mainEl.append(e.el)},saveNewMapLayer:function(e){var t=this,n=this.map.newLayerInstance({pointCollection:{_id:e}});console.log("saving new map layer",n),n.once("sync",function(){t.initMapLayer(n,!0)}),n.save({},{success:function(e,t,n){console.log("new map layer saved",e)},error:function(e,t,n){console.error("failed to save new map layer")}})}}),S=function(){app=new E,n.history.start({pushState:!0})||e("#app").html("page not found")};return{initialize:S}});