define(["jquery","underscore","backbone","views/homepage-view","views/header-view","views/setup-view","views/map-ol-view","views/data-info-view","views/data-detail-view","views/map-info-view","views/map-layer-editor-view","views/data-legend-view","views/modal-view","views/share-view","collections/map-point-collection","models/map","models/point","models/map_layer"],function(e,t,n,r,i,s,o,u,a,f,l,c,h,p,d,v,m,g){var b=n.Router.extend({routes:{},defaultRoutes:{"":"homeRoute",removed:"homeRoute","admin/:slug":"mapAdminRoute","admin/:slug/:view":"mapAdminRoute","admin/:slug/:view/:pos":"mapAdminRoute",":slug":"mapRoute",":slug/:view":"mapRoute",":slug/:view/:pos":"mapRoute"},byHostRoutes:{removed:"homeRoute",admin:"mapAdminRouteByHost","admin/:view":"mapAdminRouteByHost","admin/:view/:pos":"mapAdminRouteByHost","":"mapRouteByHost",":view":"mapRouteByHost",":view/:pos":"mapRouteByHost"},getRoutes:function(){var e;window.MAP_SLUG?(console.log("route by custom host"),e=this.byHostRoutes):(console.log("route by slug"),e=this.defaultRoutes);var t=[];for(var n in e)t.unshift([n,e[n]]);return t},setUIReady:function(){e("#center-spinner").hide("fast",function(){e(this).remove()})},initialize:function(){var e=this;t.each(this.getRoutes(),function(t){e.route.apply(e,t)}),this.map=null,this.firstLoad=!0,this.pointCollections={},this.timeBasedPointCollections={},this.isRendered=!1,this.mapLayersInitialized=!1,this.mapLayerEditorViews={},this.settingsVisible=!0,this.graphVisible=!1,this.dataLibraryVisible=!1,this.chatVisible=!1,this.vent=t.extend({},n.Events),this.vent.bind("mapViewReady",function(){e.setUIReady(),e.mapLayersInitialized||e.initMapLayers()}),this.adminRoute=!1,this.routingByHost=!1,t.bindAll(this,"updateMapLayer"),this.vent.bind("updateMapLayer",this.updateMapLayer),t.bindAll(this,"showMapLayerEditor"),this.vent.bind("showMapLayerEditor",this.showMapLayerEditor),t.bindAll(this,"toggleValFormatter"),this.vent.bind("toggleValFormatter",this.toggleValFormatter),t.bindAll(this,"toggleLayerVisibility"),this.vent.bind("toggleLayerVisibility",this.toggleLayerVisibility),t.bindAll(this,"viewOptionsChanged"),this.vent.bind("viewOptionsChanged",this.viewOptionsChanged),t.bindAll(this,"updateVisibleDate"),this.vent.bind("updateVisibleDate",this.updateVisibleDate),t.bindAll(this,"showDetailData"),this.vent.bind("showDetailData",this.showDetailData),t.bindAll(this,"hideDetailData"),this.vent.bind("hideDetailData",this.hideDetailData),this.isEmbedded=window!=window.top},mapRoute:function(t,n,r){var i,s,o,u,a;if(n){this.setupRoute=n=="setup";if(!this.setupRoute){var f=n.split(":");i=f.shift(),f.length>1&&(s=f.shift()),f.length&&(o=f.shift())}else e("#app").empty()}if(r!=undefined){var f=r.split(",");f.length==3&&(a=f.pop()),f.length==2&&(x=parseFloat(f.shift()),y=parseFloat(f.shift()),!isNaN(x)&&!isNaN(y)&&(u=[x,y]))}console.log("slug:",t,"mapViewName:",i,"viewBase:",s,"viewStyle:",o,"center:",u,"zoom:",a),this.loadAndInitMap(t,i,u,a,s,o)},mapAdminRoute:function(e,t,n){this.adminRoute=!0,this.mapRoute(e,t,n)},mapRouteByHost:function(e,t){return this.routingByHost=!0,this.mapRoute(window.MAP_SLUG,e,t)},mapAdminRouteByHost:function(e,t){return this.routingByHost=!0,this.mapAdminRoute(window.MAP_SLUG,e,t)},homeRoute:function(){this.firstLoad?(this.firstLoad=!1,this.homepageView=new r,e("#app").append(this.homepageView.render().el)):window.location.reload(!0)},genMapViewParam:function(e){if(!e||e=="map"){var t=this.mapView.viewBase&&this.mapView.viewBase!=DEFAULT_MAP_VIEW_BASE,n=t||this.mapView.viewStyle&&this.mapView.viewStyle!=this.mapView.defaultViewStyle;e=this.mapViewName+(n||t?":":"")+(t?this.mapView.viewBase+":":"")+(n?this.mapView.viewStyle?this.mapView.viewStyle:"default":"")}return e},genMapURI:function(e,t,n){var n=(n||n==undefined)&&this.adminRoute;return e=this.genMapViewParam(e),genMapURI(this.mapInfo,e,t,n,this.routingByHost?!1:"publicslug")},genPublicURL:function(e){return genMapURL(this.mapInfo,e?this.getURIOptsForVisibleMapArea():!1,!1)},getURIOptsForVisibleMapArea:function(e){if(!e)var e=this.mapView.getVisibleMapArea();var t={x:e.center[0],y:e.center[1],zoom:e.zoom,mapViewName:this.genMapViewParam("map")},n={x:this.mapInfo.initialArea.center.length?this.mapInfo.initialArea.center[0]:0,y:this.mapInfo.initialArea.center.length?this.mapInfo.initialArea.center[1]:0,zoom:this.mapInfo.initialArea.zoom!=undefined?this.mapInfo.initialArea.zoom:0};return n.x!=t.x||n.y!=t.y||n.zoom!=t.zoom?t:{mapViewName:t.mapViewName}},genMapURIForVisibleArea:function(e){return app.genMapURI(null,this.getURIOptsForVisibleMapArea(e))},genAdminURL:function(){return genMapURL(this.mapInfo,!1,!0)},loadAndInitMap:function(e,t,n,r,i,s){var o=this;switch(t){default:t="map";break;case"map":break;case"globe":}if(!o.mapInfo){this.map=new v({publicslug:e}),this.map.fetch({success:function(e,u,a){o.initMapInfo(e.attributes),o.initMapView(t,n,r,i,s)},error:function(t,n,r){console.error("failed to load map",e)}});return}o.initMapView(t,n,r,i,s)},initMapInfo:function(e){this.mapLayersById={},this.mapInfo=e;for(var t=this.mapInfo.layers.length-1;t>=0;t--){this.mapLayersById[this.mapInfo.layers[t]._id]=new g(this.mapInfo.layers[t],{map:this.map});var n=this.mapInfo.layers[t];n.sessionOptions={visible:n.options.visible};if(n.options.valFormat){n.sessionOptions.valFormatters=[];for(var r=0;r==0||r<n.options.valFormat.length;r++){var i=null;r<n.options.valFormat.length&&(i=n.options.valFormat[r]),i||(i={}),i.unit||(i.unit=n.pointCollection.unit),n.sessionOptions.valFormatters.push(new ValFormatter(i))}n.sessionOptions.valFormatter=n.sessionOptions.valFormatters[0]}}},toggleLayerVisibility:function(e,t){var n=this,r=this.pointCollections[e],i=this.getMapLayerDeprecated(e);i.sessionOptions.visible=t,console.log("toggleLayerVisibility "+e,t,t?"fetched: "+r.visibleMapAreaFetched:""),t&&!r.visibleMapAreaFetched&&setTimeout(function(){n.fetchMapLayer(e)},300)},toggleValFormatter:function(e,t){e.sessionOptions.valFormatter=t},getDefaultVisibleMapArea:function(){var e=DEFAULT_MAP_AREA;return this.mapInfo.initialArea&&this.mapInfo.initialArea.center.length&&(e.center=this.mapInfo.initialArea.center),this.mapInfo.initialArea.zoom!=undefined&&(e.zoom=this.mapInfo.initialArea.zoom),e},initMapView:function(t,n,r,i,s){var a=this;a.isRendered||a.render(t),this.mapViewName=t,this.mapView&&(this.mapView.remove(),this.mapView=null);switch(this.mapViewName){case"map":var l=o;e("#navMap").addClass("active"),e("#navGlobe").removeClass("active");break;case"globe":var l=MapGLView;e("#navMap").removeClass("active"),e("#navGlobe").addClass("active")}var c=this.getDefaultVisibleMapArea();n&&(c.center=n),r&&(c.zoom=r),this.mapView=new l({vent:a.vent,visibleMapArea:c});var h=this.mapView.render().el;e("#app").append(h),this.$mainEl=e(h),this.mainEl=this.$mainEl[0],this.mapView.start(i,s),this.viewOptionsChanged(this.mapView);var p=e('<div class="snap top" /><div class="snap right" />');this.$mainEl.append(p),this.dataInfoView=(new u({vent:this.vent})).render(),this.attachPanelView(this.dataInfoView),this.mapInfoView=(new f({model:this.map,vent:this.vent,mapInfo:this.mapInfo})).render()},viewOptionsChanged:function(t){var n=this;if(t==this.mapView){e("#app").removeClass(function(e,t){return(t.match(/\bmap-style-\S+/g)||[]).join(" ")});if(this.mapView.viewStyles){e("#app").addClass("map-style-"+this.mapView.viewStyle);var r=[];e.each(this.mapView.viewStyles,function(e,t){var i=e;r.push("<li"+(i==n.mapView.viewStyle?' class="inactive"':"")+">"+'<a href="#'+i+'">'+t+"</a></li>")}),e("#viewStyle .dropdown-menu").html(r.join("")),e("#viewStyleCurrent").text(this.mapView.viewStyles[this.mapView.viewStyle]),e("#viewStyle").show()}else e("#viewStyle").hide();if(this.mapView.viewBase){var r=[];for(var i in this.mapView.ViewBase){var s=this.mapView.ViewBase[i].prototype;r.push("<li"+(i==n.mapView.viewBase?' class="inactive"':"")+">"+'<a href="#'+i+'">'+'<span class="view-base-thumb" style="background: url(/assets/baselayer-thumbs/'+i+'.png)"></span>'+'<span class="view-base-caption">'+s.providerName+"</span>"+"</a></li>")}e("#viewBase .dropdown-menu").html(r.join("")),e("#viewBaseCurrent").text(this.mapView.ViewBase[this.mapView.viewBase].prototype.providerName),e("#viewBaselayer").show()}else e("#viewBaselayer").hide()}},setViewStyle:function(e,t){this.vent.trigger("updateViewStyle",e),(t||t==undefined)&&app.navigate(app.genMapURIForVisibleArea(),{trigger:!1})},setViewBase:function(e,t){this.vent.trigger("updateViewBase",e),(t||t==undefined)&&app.navigate(app.genMapURIForVisibleArea(),{trigger:!1})},showMapInfo:function(){this.mapInfoView.show()},showShareLink:function(){var e=(new p).render();e.show()},showAbout:function(){var e=(new h).render();e.setTitle("About GeoSense"),e.setBody(nl2p("GeoSense is an open publishing platform for visualization, social sharing, and data analysis of geospatial data. It explores the power of data analysis through robust layering and highly customizable data visualization. GeoSense supports the simultaneous comparison and individual styling for multiple massive data sources ranging from 10 thousand to 10 million geolocated points.\n\nDeveloped by Anthony DeVincenzi and Samuel Luescher of the MIT Media Lab, alongside Hiroshi Ishii and Safecast.org.")),e.show()},showSetupView:function(){this.setupView.show()},isMapAdmin:function(){return this.adminRoute&&this.mapInfo.admin},render:function(){console.log("app.render");var t=this;window.document.title=this.mapInfo.title+" â€“ GeoSense",this.isEmbedded&&e("body").addClass("embed"),this.headerView=new i({vent:this.vent,mapInfo:this.mapInfo}),e("#app").append(this.headerView.render().el),e("body").css("overflow","hidden"),window.location.href.indexOf("4D4R0IjQJYzGP0m")!=-1&&e("body").addClass("embed"),this.isMapAdmin()&&(this.setupView=(new s({vent:this.vent,mapInfo:this.mapInfo})).render(),this.setupRoute&&this.showSetupView()),t.isRendered=!0},getURLParameter:function(e){return decodeURI((RegExp(e+"="+"(.+?)(&|$)").exec(location.search)||[,null])[1])},initMapLayers:function(){if(this.mapInfo.layers)for(var t=0;t<this.mapInfo.layers.length;t++){var n=this.mapInfo.layers[t].pointCollection._id;this.initMapLayer(n)}this.mapLayersInitialized=!0;if(this.mapInfo.tour&&this.mapInfo.tour.steps.length){var r=this.mapView.el;this.mapTourView=new MapTourView({vent:this.vent,mapInfo:this.mapInfo}),e(r).append(this.mapTourView.render().el)}else if(this.mapInfo.layers)for(var t=0;t<this.mapInfo.layers.length;t++){var n=this.mapInfo.layers[t].pointCollection._id,i=this.getMapLayerDeprecated(n);this.vent.trigger("toggleLayerVisibility",n,i.sessionOptions.visible)}},initMapLayer:function(t){var n=this,r=this.getMapLayerDeprecated(t);console.log("initMapLayer "+t,r);var i=n.mapView.getVisibleMapArea(),s={pointCollectionId:t,mapId:app.mapInfo._id,mapLayer:r},o=this.pointCollections[t]=new d(s);n.addDataPanelViews(t),n.mapView.addCollection(o),e(".data-info").show()},updateVisibleDate:function(t,n){var r=this;e.each(this.pointCollections,function(e,i){i.urlParams.t="w",i.urlParams.from=t.format("%Y-%m-%d"),i.urlParams.to=n.format("%Y-%m-%d"),r.fetchMapLayer(i.pointCollectionId),console.log(i.urlParams)})},showDetailData:function(e,t,n){this.dataDetailView||(this.dataDetailView=(new a({vent:this.vent})).render()),this.attachPanelView(this.dataDetailView),this.dataDetailView.snapToView(this.dataInfoView,"left",!0).hide().show("fast"),this.dataDetailView.showDetailData(e,t)},hideDetailData:function(e){this.dataDetailView&&this.dataDetailView.detach()},updateMapLayer:function(e){console.log("updateMapLayer",e);var t=this.getMapLayerDeprecated(e.pointCollection._id);for(var n in e)t[n]=e[n];this.vent.trigger("redrawMapLayer",t)},showMapLayerEditor:function(e){var t=this;this.mapLayerEditorViews[e]||(this.mapLayerEditorViews[e]=(new l({vent:this.vent,model:this.getMapLayer(e)})).render());for(var n in this.mapLayerEditorViews)e!=this.mapLayerEditorViews[n].model.get("_id")?this.mapLayerEditorViews[n].detach():this.mapLayerEditorViews[n].$el.is(":visible")?this.mapLayerEditorViews[n].hide("fast",function(){t.mapLayerEditorViews[n].detach()}):(this.attachPanelView(this.mapLayerEditorViews[n]),this.mapLayerEditorViews[n].snapToView(this.dataInfoView,"left",!0).hide().show("fast"))},attachPanelView:function(e){this.$mainEl.append(e.el)},pollForNewPointCollection:function(t,n){var r=this;if(n){setTimeout(function(){r.pollForNewPointCollection(t)},n);return}console.log("pollForNewPointCollection: "+t),e.ajax({type:"GET",url:"/api/pointcollection/"+t,error:function(){console.error("Failed to fetch new collection, trying again after timeout...")},success:function(e){r.updatePointCollectionAfterPolling(e)}})},updatePointCollectionAfterPolling:function(e){var t=e._id,n=this.getMapLayerDeprecated(t);n.pointCollection=e,e.status!==DataStatus.COMPLETE?(console.log("Collection "+t+" is busy, polling again after timeout..."),this.pollForNewPointCollection(t,POLL_INTERVAL),this.vent.trigger("setStateType","loading",n.pointCollection._id)):this.fetchMapLayer(t)},fetchPointCollection:function(e,t){var n=this;n.vent.trigger("setStateType","loading",e),t.fetch({success:function(t){n.vent.trigger("setStateType","complete",e)}})},fetchMapLayer:function(e){var t=this,n=this.getMapLayerDeprecated(e),r=this.pointCollections[e];r.setVisibleMapArea(this.mapView.getVisibleMapArea()),console.log("fetch",n),n.sessionOptions.visible&&this.fetchPointCollection(e,r)},createMapLayer:function(e){var t=this,n=new g({pointCollectionId:e},{map:this.map});console.log("creating map layer",n),n.save({},{success:function(n,r,i){t.initMapInfo(n.attributes),t.initMapLayer(e)},error:function(e,t,n){console.error("failed to create map layer")}})},getMapLayer:function(e){return this.mapLayersById[e]},getMapLayerDeprecated:function(e){for(var t=0;t<this.mapInfo.layers.length;t++)if(e==this.mapInfo.layers[t].pointCollection._id)return this.mapInfo.layers[t]},addDataPanelViews:function(t){var n={vent:this.vent,collection:this.pointCollections[t],collectionId:t,mapLayer:this.getMapLayerDeprecated(t)},r=new c(n),i=r.render().el;e("#data-info-view .accordion").append(i)}}),w=function(){app=new b,n.history.start({pushState:!0})||e("#app").html("page not found")};return{initialize:w}});