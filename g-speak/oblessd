#!/usr/bin/env ruby

puts "---------------------------------------------------"
puts "oblessd v0.1 -- a throttled Plasma WebSocket server"
puts "created by Samuel Luescher <luescher@media.mit.edu>"
puts "---------------------------------------------------"

require 'rubygems'
require 'em-websocket'

$: << '/opt/oblong/g-speak-64-2/lib64/ruby/'
require 'Pool'
include Plasma

pool = "tcp://gspeak01.media.mit.edu/tags"
host = "0.0.0.0"
port = 8080
debug = false
watch_tags = {}
fps = 50.0

open_sockets = []
socket_options = {}

Thread.abort_on_exception = true
t1 = Thread.new do
  puts "Creating Hose to %s" % pool
  h = Hose.new(pool)
  prev_time = Time.now
  targetTimeDelta = 1 / fps
  loop {
    next_time = Time.now
    timeDelta = next_time - prev_time
    if timeDelta >= targetTimeDelta
      h.tolast 
      prot = h.prev
      ingests_tags = prot.ingests["tags"]
      for socket in open_sockets
        send_tags = {}
        if prot
          for tag in watch_tags[socket]
            if ingests_tags[tag]
              send_tags[tag] = ingests_tags[tag]
            end
          end
        end
        socket.send(send_tags.to_json)
      end
      prev_time = next_time
    end
  }
end

if ARGV.length > 0:
  split = ARGV[0].split(':')
  host = split[0]
  if split.length > 1:
    port = split[1]
  end 
end

puts "Starting oblessd on %s:%i at %i fps" % [host, port, fps]

EventMachine::WebSocket.start(:host => host, :port => port, :debug => debug) do |ws|
  timer = nil
  ws.onopen {
    puts "WebSocket connected"
    open_sockets.push(ws)
    watch_tags[ws] = []
  }
  ws.onclose {
    EM.cancel_timer(timer)
    puts "WebSocket closed"
    open_sockets.delete(ws)
  }
  ws.onerror { |e|
    puts "Error: #{e.message}"
  }
  ws.onmessage { |msg|
    words = msg.split(' ')
    case words[0]
    when 'watch'
      if words.length == 2:
        puts msg
        if not watch_tags[ws].include?(words[1]):
          watch_tags[ws].push(words[1])
        end
      end
    end
  }
end

