#!/usr/bin/env ruby

puts "---------------------------------------------------"
puts "oblessd v0.1 -- a throttled Plasma WebSocket server"
puts "created by Samuel Luescher <luescher@media.mit.edu>"
puts "---------------------------------------------------"

require 'rubygems'
require 'em-websocket'

$: << '/opt/oblong/g-speak-64-2/lib64/ruby/'
require 'Pool'
include Plasma

pools = ["tcp://gspeak01.media.mit.edu/tags"]
host = "0.0.0.0"
port = 8080
debug = false
watch_tags = {}
track = {}
fps = 80.0

open_sockets = []
socket_options = {}
min_dist = 0.025


if ARGV.length > 0:
  pools = ARGV[0].split(',')

  if ARGV.length > 1:
    split = ARGV[1].split(':')
    host = split[0]
    if split.length > 1:
      port = split[1]
    end 
  end
end

def vector_dist(v1, v2)
  xd = v1[0] - v2[0]
  yd = v1[1] - v2[1]
  zd = v1[2] - v2[2]
  return Math.sqrt(xd*xd + yd*yd + zd*zd)  
end

def tag_different(tag1, tag2, min_dist)
  for cmp in ['loc', 'norm', 'over']:
    if vector_dist(tag1[cmp], tag2[cmp]) > min_dist:
      return true
    end
  end
  return false;
end

Thread.abort_on_exception = true
ingests_tags = {}
ingests_tracks = {}
sent_tags = {}

for pool in pools:
  Thread.new do
    puts "Creating Hose to %s" % pool
    h = Hose.new(pool)
    prev_time = Time.now
    targetTimeDelta = 1 / fps
    loop {
      h.tolast 
      prot = h.prev
      if prot.ingests["tags"]
        ingests_tags = prot.ingests["tags"]
      end
      if prot.ingests["tracks"]
        ingests_tracks = prot.ingests["tracks"]
      end
    }
  end
end

Thread.new do
  prev_time = Time.now
  targetTimeDelta = 1 / fps
  loop {
    next_time = Time.now
    timeDelta = next_time - prev_time
    if min_dist != 0 or timeDelta >= targetTimeDelta
      for socket in open_sockets
        send_tags = nil
        send_tracks = nil
        if ingests_tags:
          send_tags = {}
          for tag in watch_tags[socket]
            if ingests_tags[tag]:
              if (not sent_tags[socket].include?(tag)) or tag_different(sent_tags[socket][tag], ingests_tags[tag], min_dist):
                if sent_tags[socket].include?(tag):
                  #puts 'is different: '+(tag_different(sent_tags[socket][tag], ingests_tags[tag])
                end
                send_tags[tag] = ingests_tags[tag]
                sent_tags[socket][tag] = ingests_tags[tag]
              end
            end
          end
        end
        if track[socket]:
          send_tracks = ingests_tracks
        end
        send_data = {}
        if send_tags and send_tags.length > 0:
          send_data['tags'] = send_tags
        end
        if send_tracks and send_tracks.length > 0:
          send_data['tracks'] = send_tracks
        end
        if send_data.length > 0:
          socket.send(send_data.to_json)
        end
      end
      prev_time = next_time
    end
  }
end

puts "Starting oblessd on %s:%i at %i fps" % [host, port, fps]

EventMachine::WebSocket.start(:host => host, :port => port, :debug => debug) do |ws|
  timer = nil
  ws.onopen {
    puts "WebSocket connected"
    open_sockets.push(ws)
    watch_tags[ws] = []
    sent_tags[ws] = {} 
  }
  ws.onclose {
    EM.cancel_timer(timer)
    puts "WebSocket closed"
    open_sockets.delete(ws)
  }
  ws.onerror { |e|
    puts "Error: #{e.message}"
  }
  ws.onmessage { |msg|
    words = msg.split(' ')
    if words[0].chars.first == '@':
      puts 'broadcast '+msg
      for ws in open_sockets:
        puts
        ws.send(msg)
      end
    else
      puts msg
      case words[0]
        when 'watch'
          if words.length == 2:
            if not watch_tags[ws].include?(words[1]):
              watch_tags[ws].push(words[1])
            end
          end
        when 'track'
          track[ws] = true
      end
    end
  }
end

